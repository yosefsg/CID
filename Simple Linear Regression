class SLRModel:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.n = len(x)
        self.beta_1 = self.calculate_beta_1()
        self.beta_0 = self.calculate_beta_0()

    def calculate_beta_1(self):
        # Cálculo de beta_1
        sum_x = sum(self.x)
        sum_y = sum(self.y)
        sum_xy = sum([self.x[i] * self.y[i] for i in range(self.n)])
        sum_x_squared = sum([self.x[i] ** 2 for i in range(self.n)])
        return (self.n * sum_xy - sum_x * sum_y) / (self.n * sum_x_squared - sum_x ** 2)

    def calculate_beta_0(self):
        # Cálculo de beta_0
        mean_x = sum(self.x) / self.n
        mean_y = sum(self.y) / self.n
        return mean_y - self.beta_1 * mean_x

    def predict(self, x_value):
        # Predicción usando la ecuación de regresión
        return self.beta_0 + self.beta_1 * x_value

    def print_regression_equation(self):
        # Imprimir la ecuación de regresión con los valores calculados
        print(f"Sales = {self.beta_0:.2f} + {self.beta_1:.2f} * Advertising")


# Datos hardcoded del caso Benetton
advertising = [1, 2, 3, 4, 5, 6, 7, 8, 9]
sales = [2, 4, 6, 8, 10, 12, 14, 16, 18]

# Crear el modelo
model = SLRModel(advertising, sales)

# Imprimir la ecuación de regresión
model.print_regression_equation()

# Solicitar valor de Advertising y hacer predicción
try:
    x_value = float(input("Ingrese el valor de Advertising para predecir Sales: "))
    prediction = model.predict(x_value)
    print(f"Predicción de Sales para Advertising = {x_value}: {prediction:.2f}")
except ValueError:
    print("Por favor, ingrese un valor numérico válido para Advertising.")
